/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package finstere;

import java.awt.Color;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

/**
 *
 * @author nKBlaZy
 */
public class Finstere extends javax.swing.JFrame {
    /* Constantes pour les directions */
    public final static int HAUT = 1, BAS = -1, GAUCHE = 2, DROITE = -2;
    /* Constantes pour les types de flaques d'Hemoglobine (nom de l'image sans
     * l'extension)
     */
    public final static String CARRE = "tachesang_carree",
            LINEHORI = "tachesang_lineaireH";
    /* Constantes pour les couleurs des Personnages */
    public final static String[] COULEURS = {"blue", "green", "red", "yellow"};
    /* Constantes pour les valeurs des Cartes "une proie" et "deux proies */
    public final static int X = 11, XX = 12;
    /* Constantes pour les coordonnées des Personnages à l'extérieur, sortis, morts */
    public final static int[] EXTERIEUR = {16,10}, SORTI = {-1,0}, MORT = {15, -1};
    
    /* Constante pour les dimensions d'une Case */
    private final int TAILLE = 40;
    /* Constantes du début du Labyrinthe */
    private final int DEBUT_X = 26, DEBUT_Y = 20;
    /* Constantes pour les couches */
    private final Integer PLAT = new Integer(0),
            HEMO = new Integer(1),
            MUR = new Integer(2),
            MONST = new Integer(3),
            EN_DESSOUS = new Integer(3),
            AU_DESSUS = new Integer(4),
            ACTION = new Integer(5);
            
    
    /* Partie de Finstere */
    private Partie partie;
    /* JLabel du plateau */
    private JLabel plateau;
    /* JLabel des Personnages de chaque Joueur */
    private JLabel[] listePersosJ1, listePersosJ2;
    /* JLabel du choix du Personnage */
    private JLabel[] choixPersoJ1, choixPersoJ2;
    /* JLabel pour le choix de l'Action */
    private List<JLabel> choixAction;
    /* Ecouteur pour le choix du Personnage ou de l'Action */
    private ChoiceListener choiceListener;
    /* Choix du Personnage ou de l'Action */
    private int choix;
    /* JLabel des flaques d'Hemoglobine */
    private JLabel hemoCarre, hemoLineH;
    /* JLabel des Personnages sur le Labyrinthe, des Personnages morts et des 
     * Personnages sortis du gagnant
     */
    private List<JLabel> persos, morts, sortis;
    /* JLabel des Murs */
    private List<JLabel> murs;
    /* JLabel du Monstre */
    private JLabel monstre;

    /* Constructeur */
    public Finstere() {
        initComponents();
        this.plateau = new JLabel();
        this.plateau.setBounds(0, 0, 695, 479);
        this.plateau.setIcon(new ImageIcon(getClass()
                .getResource("/img/fns_plateau.jpg")));
        this.layeredPanel.add(this.plateau, this.PLAT);
        this.choiceListener = new ChoiceListener(this);
        this.scrollPane.getViewport().setBackground(new Color(37, 66, 20));
        this.listePersosJ1 = new JLabel[4];
        this.listePersosJ2 = new JLabel[4];
        this.monstre = new JLabel();
        this.murs = new ArrayList<>();
        this.choixAction = new ArrayList<>();
        this.persos = new ArrayList<>();
        this.morts = new ArrayList<>();
        this.sortis = new ArrayList<>();
    }
    
    /* Retourne true si le _tab est contenu dans _list */
    public static boolean isInList(List<int[]> _list, int[] _tab) {
        for (int[] elem : _list) {
            if (Arrays.equals(elem, _tab)) {
                return true;
            }
        }
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newGame = new javax.swing.JFrame();
        newGamePanel = new javax.swing.JPanel();
        newGameLogo = new javax.swing.JLabel();
        bienvenue = new javax.swing.JLabel();
        newGameTerm = new javax.swing.JButton();
        newGameInterface = new javax.swing.JButton();
        creationJoueurs = new javax.swing.JFrame();
        creationJoueursPanel = new javax.swing.JPanel();
        newGameLogo1 = new javax.swing.JLabel();
        j1Label = new javax.swing.JLabel();
        j1Name = new javax.swing.JTextField();
        j1Color = new javax.swing.JComboBox<>();
        j2Label = new javax.swing.JLabel();
        j2Name = new javax.swing.JTextField();
        j2Color = new javax.swing.JComboBox<>();
        commencerPartie = new javax.swing.JButton();
        victoire = new javax.swing.JFrame();
        victoirePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        victoireLabel = new javax.swing.JLabel();
        victoireListe = new javax.swing.JLayeredPane();
        victoireNewGame = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        layeredPanel = new javax.swing.JLayeredPane();
        finstereLogo = new javax.swing.JLabel();
        nbTour = new javax.swing.JLabel();
        nbManche = new javax.swing.JLabel();
        nomJ1 = new javax.swing.JLabel();
        persosJ1 = new javax.swing.JLayeredPane();
        premierJ1 = new javax.swing.JLabel();
        nomJ2 = new javax.swing.JLabel();
        persosJ2 = new javax.swing.JLayeredPane();
        premierJ2 = new javax.swing.JLabel();
        monstreLabel = new javax.swing.JLabel();
        listePioche = new javax.swing.JLabel();
        listeDefausse = new javax.swing.JLabel();
        terminerButton = new javax.swing.JButton();
        sortirButton = new javax.swing.JButton();
        mortsLabel = new javax.swing.JLabel();
        persosMorts = new javax.swing.JLayeredPane();
        derniersCoups = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        deplacementLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        partieMenu = new javax.swing.JMenu();
        newGameMenu = new javax.swing.JMenuItem();
        quitMenu = new javax.swing.JMenuItem();

        newGame.setTitle("Nouvelle Partie");
        newGame.setLocation(new java.awt.Point(850, 350));
        newGame.setName("Nouvelle Partie"); // NOI18N
        newGame.setResizable(false);
        newGame.setSize(new java.awt.Dimension(222, 268));

        newGamePanel.setBackground(new java.awt.Color(37, 66, 20));
        newGamePanel.setPreferredSize(new java.awt.Dimension(220, 268));

        newGameLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newGameLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo_finstere.gif"))); // NOI18N
        newGameLogo.setPreferredSize(new java.awt.Dimension(256, 65));

        bienvenue.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        bienvenue.setForeground(new java.awt.Color(254, 248, 120));
        bienvenue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bienvenue.setText("<html><body style='text-align: center'>Bienvenue sur Finstere Flure,<br/>le jeu qui va vous faire frissonner !!!</html>");
        bienvenue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bienvenue.setPreferredSize(new java.awt.Dimension(256, 30));

        newGameTerm.setBackground(java.awt.Color.darkGray);
        newGameTerm.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        newGameTerm.setForeground(new java.awt.Color(254, 248, 120));
        newGameTerm.setText("Nouvelle Partie dans le terminal");
        newGameTerm.setFocusPainted(false);
        newGameTerm.setMaximumSize(new java.awt.Dimension(256, 31));
        newGameTerm.setMinimumSize(new java.awt.Dimension(256, 31));
        newGameTerm.setPreferredSize(new java.awt.Dimension(256, 31));
        newGameTerm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newGameTermMouseClicked(evt);
            }
        });

        newGameInterface.setBackground(java.awt.Color.darkGray);
        newGameInterface.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        newGameInterface.setForeground(new java.awt.Color(254, 248, 120));
        newGameInterface.setText("Nouvelle Partie avec l'Interface");
        newGameInterface.setFocusPainted(false);
        newGameInterface.setMaximumSize(new java.awt.Dimension(256, 31));
        newGameInterface.setMinimumSize(new java.awt.Dimension(256, 31));
        newGameInterface.setPreferredSize(new java.awt.Dimension(256, 31));
        newGameInterface.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newGameInterfaceMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout newGamePanelLayout = new javax.swing.GroupLayout(newGamePanel);
        newGamePanel.setLayout(newGamePanelLayout);
        newGamePanelLayout.setHorizontalGroup(
            newGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGamePanelLayout.createSequentialGroup()
                .addGroup(newGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(newGamePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(newGameLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newGamePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newGameTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newGamePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(bienvenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newGamePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newGameInterface, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        newGamePanelLayout.setVerticalGroup(
            newGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newGamePanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(newGameLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(bienvenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(newGameTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newGameInterface, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout newGameLayout = new javax.swing.GroupLayout(newGame.getContentPane());
        newGame.getContentPane().setLayout(newGameLayout);
        newGameLayout.setHorizontalGroup(
            newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newGamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        newGameLayout.setVerticalGroup(
            newGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(newGamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        creationJoueurs.setTitle("Création des Joueurs");
        creationJoueurs.setLocation(new java.awt.Point(850, 350));

        creationJoueursPanel.setBackground(new java.awt.Color(37, 66, 20));

        newGameLogo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newGameLogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo_finstere.gif"))); // NOI18N
        newGameLogo1.setPreferredSize(new java.awt.Dimension(216, 65));

        j1Label.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        j1Label.setForeground(new java.awt.Color(254, 248, 120));
        j1Label.setText("Joueur 1");

        j1Name.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        j1Name.setPreferredSize(new java.awt.Dimension(100, 23));
        j1Name.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                j1NameCaretUpdate(evt);
            }
        });

        j1Color.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        j1Color.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bleu", "Vert", "Rouge", "Jaune" }));
        j1Color.setPreferredSize(new java.awt.Dimension(100, 25));
        j1Color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j1ColorActionPerformed(evt);
            }
        });

        j2Label.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        j2Label.setForeground(new java.awt.Color(254, 248, 120));
        j2Label.setText("Joueur 2 (bot si aucun nom)");

        j2Name.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        j2Name.setPreferredSize(new java.awt.Dimension(100, 23));
        j2Name.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                j2NameCaretUpdate(evt);
            }
        });

        j2Color.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        j2Color.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bleu", "Vert", "Rouge", "Jaune" }));
        j2Color.setEnabled(false);
        j2Color.setPreferredSize(new java.awt.Dimension(100, 25));
        j2Color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                j2ColorActionPerformed(evt);
            }
        });

        commencerPartie.setBackground(java.awt.Color.darkGray);
        commencerPartie.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        commencerPartie.setForeground(new java.awt.Color(254, 248, 120));
        commencerPartie.setText("Commencer la Partie");
        commencerPartie.setEnabled(false);
        commencerPartie.setFocusPainted(false);
        commencerPartie.setPreferredSize(new java.awt.Dimension(216, 31));
        commencerPartie.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                commencerPartieMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout creationJoueursPanelLayout = new javax.swing.GroupLayout(creationJoueursPanel);
        creationJoueursPanel.setLayout(creationJoueursPanelLayout);
        creationJoueursPanelLayout.setHorizontalGroup(
            creationJoueursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creationJoueursPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(creationJoueursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newGameLogo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(j1Label)
                    .addGroup(creationJoueursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(creationJoueursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(creationJoueursPanelLayout.createSequentialGroup()
                                .addComponent(j2Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16)
                                .addComponent(j2Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(j2Label))
                        .addGroup(creationJoueursPanelLayout.createSequentialGroup()
                            .addComponent(j1Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(16, 16, 16)
                            .addComponent(j1Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(commencerPartie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        creationJoueursPanelLayout.setVerticalGroup(
            creationJoueursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creationJoueursPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(newGameLogo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(j1Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(creationJoueursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(j1Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(j1Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(j2Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(creationJoueursPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(j2Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(j2Color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(commencerPartie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout creationJoueursLayout = new javax.swing.GroupLayout(creationJoueurs.getContentPane());
        creationJoueurs.getContentPane().setLayout(creationJoueursLayout);
        creationJoueursLayout.setHorizontalGroup(
            creationJoueursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(creationJoueursPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        creationJoueursLayout.setVerticalGroup(
            creationJoueursLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(creationJoueursPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        victoire.setTitle("Victoire");
        victoire.setLocation(new java.awt.Point(850, 350));

        victoirePanel.setBackground(new java.awt.Color(37, 66, 20));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo_finstere.gif"))); // NOI18N
        jLabel1.setName(""); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(256, 65));

        victoireLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        victoireLabel.setForeground(new java.awt.Color(254, 248, 120));
        victoireLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        victoireLabel.setText("Victoireee !!!!");
        victoireLabel.setPreferredSize(new java.awt.Dimension(256, 64));

        victoireListe.setPreferredSize(new java.awt.Dimension(132, 40));

        javax.swing.GroupLayout victoireListeLayout = new javax.swing.GroupLayout(victoireListe);
        victoireListe.setLayout(victoireListeLayout);
        victoireListeLayout.setHorizontalGroup(
            victoireListeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 132, Short.MAX_VALUE)
        );
        victoireListeLayout.setVerticalGroup(
            victoireListeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        victoireNewGame.setBackground(java.awt.Color.darkGray);
        victoireNewGame.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        victoireNewGame.setForeground(new java.awt.Color(254, 248, 120));
        victoireNewGame.setText("Nouvelle Partie");
        victoireNewGame.setFocusPainted(false);
        victoireNewGame.setPreferredSize(new java.awt.Dimension(256, 31));
        victoireNewGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                victoireNewGameMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout victoirePanelLayout = new javax.swing.GroupLayout(victoirePanel);
        victoirePanel.setLayout(victoirePanelLayout);
        victoirePanelLayout.setHorizontalGroup(
            victoirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(victoirePanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(victoirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(victoireLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(victoirePanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(victoireListe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(victoireNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
        victoirePanelLayout.setVerticalGroup(
            victoirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(victoirePanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(victoireLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(victoireListe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(victoireNewGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout victoireLayout = new javax.swing.GroupLayout(victoire.getContentPane());
        victoire.getContentPane().setLayout(victoireLayout);
        victoireLayout.setHorizontalGroup(
            victoireLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(victoirePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        victoireLayout.setVerticalGroup(
            victoireLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(victoirePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Finstere Flure");
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(37, 66, 20));

        layeredPanel.setBackground(new java.awt.Color(255, 255, 255));
        layeredPanel.setOpaque(true);
        layeredPanel.setPreferredSize(new java.awt.Dimension(695, 479));

        javax.swing.GroupLayout layeredPanelLayout = new javax.swing.GroupLayout(layeredPanel);
        layeredPanel.setLayout(layeredPanelLayout);
        layeredPanelLayout.setHorizontalGroup(
            layeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 695, Short.MAX_VALUE)
        );
        layeredPanelLayout.setVerticalGroup(
            layeredPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 479, Short.MAX_VALUE)
        );

        finstereLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        finstereLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/logo_finstere.gif"))); // NOI18N
        finstereLogo.setPreferredSize(new java.awt.Dimension(211, 65));

        nbTour.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        nbTour.setForeground(new java.awt.Color(254, 248, 120));
        nbTour.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nbTour.setText("Tour n°1");
        nbTour.setPreferredSize(new java.awt.Dimension(201, 16));

        nbManche.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        nbManche.setForeground(new java.awt.Color(254, 248, 120));
        nbManche.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        nbManche.setText("Manche n°1");
        nbManche.setPreferredSize(new java.awt.Dimension(201, 16));

        nomJ1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        nomJ1.setForeground(new java.awt.Color(254, 248, 120));
        nomJ1.setText("Joueur 1");

        persosJ1.setPreferredSize(new java.awt.Dimension(178, 40));

        javax.swing.GroupLayout persosJ1Layout = new javax.swing.GroupLayout(persosJ1);
        persosJ1.setLayout(persosJ1Layout);
        persosJ1Layout.setHorizontalGroup(
            persosJ1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );
        persosJ1Layout.setVerticalGroup(
            persosJ1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        premierJ1.setPreferredSize(new java.awt.Dimension(21, 40));

        nomJ2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        nomJ2.setForeground(new java.awt.Color(254, 248, 120));
        nomJ2.setText("Joueur 2");

        persosJ2.setPreferredSize(new java.awt.Dimension(178, 40));

        javax.swing.GroupLayout persosJ2Layout = new javax.swing.GroupLayout(persosJ2);
        persosJ2.setLayout(persosJ2Layout);
        persosJ2Layout.setHorizontalGroup(
            persosJ2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 178, Short.MAX_VALUE)
        );
        persosJ2Layout.setVerticalGroup(
            persosJ2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        premierJ2.setPreferredSize(new java.awt.Dimension(21, 40));

        monstreLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        monstreLabel.setForeground(new java.awt.Color(254, 248, 120));
        monstreLabel.setText("Monstre");

        listePioche.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        listePioche.setForeground(new java.awt.Color(254, 248, 120));
        listePioche.setText("Pioche : 8 cartes (5 7 7 8 8 10 X XX)");

        listeDefausse.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        listeDefausse.setForeground(new java.awt.Color(254, 248, 120));
        listeDefausse.setText("Défausse : 0 cartes ()");

        terminerButton.setBackground(java.awt.Color.darkGray);
        terminerButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        terminerButton.setForeground(new java.awt.Color(254, 248, 120));
        terminerButton.setText("Terminer");
        terminerButton.setEnabled(false);
        terminerButton.setFocusPainted(false);

        sortirButton.setBackground(java.awt.Color.darkGray);
        sortirButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        sortirButton.setForeground(new java.awt.Color(254, 248, 120));
        sortirButton.setText("Sortir");
        sortirButton.setEnabled(false);
        sortirButton.setFocusPainted(false);

        mortsLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        mortsLabel.setForeground(new java.awt.Color(254, 248, 120));
        mortsLabel.setText("Morts");

        persosMorts.setPreferredSize(new java.awt.Dimension(454, 40));

        javax.swing.GroupLayout persosMortsLayout = new javax.swing.GroupLayout(persosMorts);
        persosMorts.setLayout(persosMortsLayout);
        persosMortsLayout.setHorizontalGroup(
            persosMortsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );
        persosMortsLayout.setVerticalGroup(
            persosMortsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        derniersCoups.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        derniersCoups.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fr_dernierscoups.gif"))); // NOI18N
        derniersCoups.setPreferredSize(new java.awt.Dimension(280, 22));

        scrollPane.setBackground(new java.awt.Color(37, 66, 20));
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(47, 76, 30), 4));
        scrollPane.setPreferredSize(new java.awt.Dimension(280, 370));

        deplacementLabel.setBackground(new java.awt.Color(37, 66, 20));
        deplacementLabel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        deplacementLabel.setForeground(new java.awt.Color(254, 248, 120));
        deplacementLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deplacementLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        scrollPane.setViewportView(deplacementLabel);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(layeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(sortirButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(terminerButton)))
                .addGap(16, 16, 16)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nbManche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nbTour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(nomJ2)
                                .addGroup(mainPanelLayout.createSequentialGroup()
                                    .addComponent(persosJ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(premierJ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(nomJ1)
                                .addComponent(finstereLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(listeDefausse)
                            .addComponent(mortsLabel)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(persosJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(premierJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(monstreLabel)
                            .addComponent(listePioche))
                        .addGap(16, 16, 16)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(derniersCoups, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(persosMorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(layeredPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(terminerButton)
                            .addComponent(sortirButton)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(finstereLogo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(nbTour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(nbManche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(nomJ1)
                                .addGap(6, 6, 6)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(persosJ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(premierJ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addComponent(nomJ2)
                                .addGap(6, 6, 6)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(persosJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(premierJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addComponent(monstreLabel)
                                .addGap(6, 6, 6)
                                .addComponent(listePioche)
                                .addGap(6, 6, 6)
                                .addComponent(listeDefausse)
                                .addGap(16, 16, 16)
                                .addComponent(mortsLabel))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(derniersCoups, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addComponent(persosMorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        partieMenu.setText("Partie");
        partieMenu.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N

        newGameMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newGameMenu.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        newGameMenu.setText("Nouvelle Partie");
        newGameMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuActionPerformed(evt);
            }
        });
        partieMenu.add(newGameMenu);

        quitMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenu.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        quitMenu.setText("Quitter");
        quitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuActionPerformed(evt);
            }
        });
        partieMenu.add(quitMenu);

        menuBar.add(partieMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /* Démarre une Partie dans le terminal */
    private void newGameTermMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newGameTermMouseClicked
        this.newGame.setVisible(false);
        this.setVisible(false);
        this.partie = new Partie(this, true);
        this.partie.initPartie();
        this.partie.start();
    }//GEN-LAST:event_newGameTermMouseClicked

    /* Démarre une Partie avec l'Interface graphique et demande le nom et la 
     * couleur des Joueurs 
     */
    private void newGameInterfaceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newGameInterfaceMouseClicked
        this.newGame.setVisible(false);
        this.partie = new Partie(this, false);
        this.creationJoueurs.requestFocusInWindow();
        this.creationJoueurs.pack();
        this.creationJoueurs.setVisible(true);
    }//GEN-LAST:event_newGameInterfaceMouseClicked

    /* Ouvre le menu pour commencer une nouvelle Partie */
    private void newGameMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuActionPerformed
        this.newGame.requestFocusInWindow();
        this.newGame.pack();
        this.newGame.setVisible(true);
    }//GEN-LAST:event_newGameMenuActionPerformed

    /* Ferme le jeu */
    private void quitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitMenuActionPerformed
    
    /* Active le bouton Commencer la Partie si les couleurs choisies par les 
     * Joueurs ne sont pas identiques
     */
    private void j1ColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j1ColorActionPerformed
        if (this.j2Color.isEnabled()) {
            if (this.j1Color.getSelectedIndex() == this.j2Color.getSelectedIndex()) {
                this.commencerPartie.setEnabled(false);
            } else {
                this.commencerPartie.setEnabled(true);
            }
        } else {
            this.commencerPartie.setEnabled(true);
        }
    }//GEN-LAST:event_j1ColorActionPerformed

    /* Active le bouton Commencer la Partie si les couleurs choisies par les 
     * Joueurs ne sont pas identiques
     */
    private void j2ColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_j2ColorActionPerformed
        if (this.j1Color.getSelectedIndex() == this.j2Color.getSelectedIndex()) {
            this.commencerPartie.setEnabled(false);
        } else {
            this.commencerPartie.setEnabled(true);
        }
    }//GEN-LAST:event_j2ColorActionPerformed

    /* Active le bouton Commencer la Partie lors de la saisie de j1Name */
    private void j1NameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_j1NameCaretUpdate
        if (this.j1Name.getText().length() != 0) {
            if (this.j2Color.isEnabled()) {
                if (this.j1Color.getSelectedIndex() == this.j2Color.getSelectedIndex()) {
                    this.commencerPartie.setEnabled(false);
                } else {
                    this.commencerPartie.setEnabled(true);
                }
            } else {
                this.commencerPartie.setEnabled(true);
            }
        } else {
            this.commencerPartie.setEnabled(false);
        }
    }//GEN-LAST:event_j1NameCaretUpdate

    /* Active la ComboxBox j2Color si il y a un nom saisie dans j2Name */
    private void j2NameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_j2NameCaretUpdate
        if (this.j2Name.getText().length() != 0) {
            this.j2Color.setEnabled(true);
            if (this.j1Color.getSelectedIndex() == this.j2Color.getSelectedIndex()) {
                this.commencerPartie.setEnabled(false);
            } else {
                this.commencerPartie.setEnabled(true);
            }
        } else {
            this.j2Color.setEnabled(false);
            this.j2Color.setSelectedIndex(0);
        }
    }//GEN-LAST:event_j2NameCaretUpdate

    /* Initialise et lance la Partie avec les informations saisies */
    private void commencerPartieMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_commencerPartieMouseClicked
        if (this.commencerPartie.isEnabled()) {
            this.resetGame();
            String[] noms;
            int[] couleurs;
            int nbJoueurs = 1;
            if (this.j2Color.isEnabled()) {
                nbJoueurs++;
                noms = new String[2];
                noms[0] = this.j1Name.getText();
                noms[1] = this.j2Name.getText();
                couleurs = new int[2];
                couleurs[0] = this.j1Color.getSelectedIndex();
                couleurs[1] = this.j2Color.getSelectedIndex();
            } else {
                noms = new String[1];
                noms[0] = this.j1Name.getText();
                couleurs = new int[1];
                couleurs[0] = this.j1Color.getSelectedIndex();
            }
            this.nomJ1.setText(noms[0]);
            if (nbJoueurs > 1) {
                this.nomJ2.setText(noms[1]);
            } else {
                this.nomJ2.setText("Bot");
            }
            this.creationJoueurs.setVisible(false);
            this.partie.initPartie(nbJoueurs, noms, couleurs);
            this.initInterface();
            this.partie.start();
        }
    }//GEN-LAST:event_commencerPartieMouseClicked

    /* Demande de nouvelle Partie depuis la fenêtre de victoire */
    private void victoireNewGameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_victoireNewGameMouseClicked
        this.victoire.setVisible(false);
        this.newGame.requestFocusInWindow();
        this.newGame.pack();
        this.newGame.setVisible(true);
    }//GEN-LAST:event_victoireNewGameMouseClicked

    /* Dispose les élements de la Partie sur l'Interface */
    private void initInterface() {
        /* Mise en place de la liste des Personnages */
        this.updateListesPersos();
        
        /* Mise en place des flaques d'Hémoglobine */
        Hemoglobine carre = this.partie.getHemoCarree();
        if (carre != null) {
            this.hemoCarre = new JLabel();
            this.hemoCarre.setBounds(this.DEBUT_X + this.TAILLE * carre.getX(),
                    this.DEBUT_Y + this.TAILLE * carre.getY(), 
                    this.TAILLE * 2, this.TAILLE * 2);
            this.hemoCarre.setVerticalAlignment(SwingConstants.CENTER);
            this.hemoCarre.setHorizontalAlignment(SwingConstants.CENTER);
            this.hemoCarre.setIcon(carre.getImageIcon());
            this.layeredPanel.add(this.hemoCarre, this.HEMO);
        }
        
        Hemoglobine lineH = this.partie.getHemoLineH();
        if (lineH != null) {
            this.hemoLineH = new JLabel();
            this.hemoLineH.setBounds(this.DEBUT_X + this.TAILLE * lineH.getX(),
                    this.DEBUT_Y + this.TAILLE * lineH.getY(), 
                    this.TAILLE * 4, this.TAILLE);
            this.hemoLineH.setVerticalAlignment(SwingConstants.CENTER);
            this.hemoLineH.setHorizontalAlignment(SwingConstants.CENTER);
            this.hemoLineH.setIcon(lineH.getImageIcon());
            this.layeredPanel.add(this.hemoLineH, this.HEMO);
        }
        
        /* Mise en place des Murs */
        this.updateMurs();
        
        /* Mise en place du Monstre */
        this.updateMonstre();
    }
    
    /* Réinitialise l'Interface pour accueillir une nouvelle Partie */
    private void resetGame() {
        this.cleanChoixAction();
        this.cleanChoixPerso();
        this.nomJ1.setText("Joueur 1");
        this.nomJ2.setText("Joueur 2");
        this.deplacementLabel.setText("");
        
        /* Retire les Personnages du Labyrinthe */
        for (JLabel perso : this.persos) {
            this.layeredPanel.remove(perso);
        }
        this.persos.clear();
        
        /* Retire les Murs du Labyrinthe */
        for (JLabel mur : this.murs) {
            this.layeredPanel.remove(mur);
        }
        this.murs.clear();
        
        /* Retire le Monstre du Labyrinthe */
        this.layeredPanel.remove(this.monstre);
        
        /* Remet les JLabel des Cartes correctement */
        this.listePioche.setText("Pioche : 8 cartes (5 7 7 8 8 10 X XX)");
        this.listeDefausse.setText("Défausse : 0 cartes ()");
        
        /* Supprime les Personnages de la liste des morts */
        this.cleanDeplacementMonstre();
    }
    
    /* Met à jour les JLabel des Personnages dans les listes de chaque Joueur */
    public void updateListesPersos() {
        for (int i = 0 ; i < 4 ; i++) {
            if (this.listePersosJ1[i] != null) {
                this.persosJ1.remove(this.listePersosJ1[i]);
            }
            if (this.listePersosJ2[i] != null) {
                this.persosJ2.remove(this.listePersosJ2[i]);
            }
        }
        
        Personnage[][] persos = this.partie.getPersonnages();
        for (int indexJ = 0 ; indexJ < persos.length ; indexJ++) {
            for (int indexP = 0 ; indexP < persos[indexJ].length ; indexP++) {
                if (indexJ == 0) {
                    this.listePersosJ1[indexP] = new JLabel();
                    this.listePersosJ1[indexP].setBounds(
                            (this.TAILLE + 6) * indexP, 0,
                            this.TAILLE, this.TAILLE );
                    this.listePersosJ1[indexP]
                            .setVerticalAlignment(SwingConstants.CENTER);
                    this.listePersosJ1[indexP]
                            .setHorizontalAlignment(SwingConstants.CENTER);
                    this.listePersosJ1[indexP].setIcon(persos[indexJ][indexP]
                            .getImageIcon());
                    this.persosJ1.add(this.listePersosJ1[indexP], this.EN_DESSOUS);
                } else if (indexJ == 1) {
                    this.listePersosJ2[indexP] = new JLabel();
                    this.listePersosJ2[indexP].setBounds(
                            (this.TAILLE + 6) * indexP, 0,
                            this.TAILLE, this.TAILLE );
                    this.listePersosJ2[indexP]
                            .setVerticalAlignment(SwingConstants.CENTER);
                    this.listePersosJ2[indexP]
                            .setHorizontalAlignment(SwingConstants.CENTER);
                    this.listePersosJ2[indexP].setIcon(persos[indexJ][indexP]
                            .getImageIcon());
                    this.persosJ2.add(this.listePersosJ2[indexP], this.EN_DESSOUS);
                }
            }
        }
    }
    
    /* Met à jour la position des Personnages */
    public void updatePersos() {
        for (JLabel perso : this.persos) {
            this.layeredPanel.remove(perso);
        }
        this.persos.clear();
        for (Personnage[] personnages : this.partie.getPersonnages()) {
            for (Personnage p : personnages) {
                if (p.isOnLaby()) {
                    JLabel perso = new JLabel();
                    perso.setBounds(this.DEBUT_X + this.TAILLE * p.getX(),
                            this.DEBUT_Y + this.TAILLE * p.getY(),
                            this.TAILLE, this.TAILLE);
                    perso.setVerticalAlignment(SwingConstants.CENTER);
                    perso.setHorizontalAlignment(SwingConstants.CENTER);
                    perso.setIcon(p.getImageIcon());
                    if (p.isAuDessus()) {
                        this.layeredPanel.add(perso, this.AU_DESSUS);
                    } else {
                        this.layeredPanel.add(perso, this.EN_DESSOUS);
                    }
                    
                    this.persos.add(perso);
                }
            }
        } 
        this.layeredPanel.repaint();
    }
    
    /* Met à jour la position des Murs */
    public void updateMurs() {
        for (JLabel mur : this.murs) {
            this.layeredPanel.remove(mur);
        }
        this.murs.clear();
        for (Mur m : this.partie.getMurs()) {
            JLabel mur = new JLabel();
            mur.setBounds(this.DEBUT_X + this.TAILLE * m.getX(),
                    this.DEBUT_Y + this.TAILLE * m.getY(),
                    this.TAILLE, this.TAILLE);
            mur.setVerticalAlignment(SwingConstants.CENTER);
            mur.setHorizontalAlignment(SwingConstants.CENTER);
            mur.setIcon(new ImageIcon(getClass().getResource("/img/mur.png")));
            this.layeredPanel.add(mur, this.MUR);
            this.murs.add(mur);
        }
        
        this.layeredPanel.repaint();
    }
    
    /* Met à jour la position du Monstre */
    public void updateMonstre() {
        this.layeredPanel.remove(this.monstre);
        Monstre m = this.partie.getMonstre();
        this.monstre.setBounds(this.DEBUT_X + this.TAILLE * m.getX(),
                this.DEBUT_Y + this.TAILLE * m.getY(), this.TAILLE, this.TAILLE);
        this.monstre.setVerticalAlignment(SwingConstants.CENTER);
        this.monstre.setHorizontalAlignment(SwingConstants.CENTER);
        this.monstre.setIcon(m.getImageIcon());
        this.layeredPanel.add(this.monstre, this.MONST);
        this.layeredPanel.repaint();
    }
    
    /* Met à jour les informations de la Partie (nbTour et nbManche) */
    public void updateInfo() {
        this.nbManche.setText("Manche n°" + this.partie.getNbManche());
        this.nbTour.setText("Tour n°" + this.partie.getNbTour());
    }
    
    /* Affiche les Personnages disponibles */
    public void afficherChoixPerso(int _indexJoueur) {
        Personnage[] persos = this.partie.getPersonnages()[_indexJoueur];
        
        if (_indexJoueur == 0) {
            this.choixPersoJ1 = new JLabel[4];
            for (int i = 0 ; i < 4 ; i++) {
                if (persos[i].isJouable()) {
                    this.choixPersoJ1[i] = new JLabel();
                    this.choixPersoJ1[i].setBounds((this.TAILLE + 6) * i, 0,
                            this.TAILLE, this.TAILLE );
                    this.choixPersoJ1[i].setName("" + i);
                    this.choixPersoJ1[i].setIcon(new ImageIcon(getClass()
                            .getResource("/img/choix.png")));
                    this.choixPersoJ1[i].setCursor(new Cursor(Cursor.HAND_CURSOR));
                    this.choixPersoJ1[i].addMouseListener(this.choiceListener);
                    this.persosJ1.add(this.choixPersoJ1[i], this.ACTION);
                }
            }
        } else {
            this.choixPersoJ2 = new JLabel[4];
            for (int i = 0 ; i < 4 ; i++) {
                if (persos[i].isJouable()) {
                    this.choixPersoJ2[i] = new JLabel();
                    this.choixPersoJ2[i].setBounds((this.TAILLE + 6) * i, 0,
                            this.TAILLE, this.TAILLE );
                    this.choixPersoJ2[i].setName("" + i);
                    this.choixPersoJ2[i].setIcon(new ImageIcon(getClass()
                            .getResource("/img/choix.png")));
                    this.choixPersoJ2[i].setCursor(new Cursor(Cursor.HAND_CURSOR));
                    this.choixPersoJ2[i].addMouseListener(this.choiceListener);
                    this.persosJ2.add(this.choixPersoJ2[i], this.ACTION);
                }
            }
        }
    }
    
    /* Supprime les JLabel du choix du Personnage */
    public void cleanChoixPerso() {
        for (int i = 0 ; i < 4 ; i++) {
            if (this.choixPersoJ1 != null) {
                if (this.choixPersoJ1[i] != null) {
                    this.persosJ1.remove(this.choixPersoJ1[i]);
                }
            }
            if (this.choixPersoJ2 != null) {
                if (this.choixPersoJ2[i] != null) {
                    this.persosJ2.remove(this.choixPersoJ2[i]);
                }
            }
        }
        
        this.persosJ1.repaint();
        this.persosJ2.repaint();
    }
    
    /* Affiche les Actions possibles */
    public void afficherChoixAction( Personnage _perso) {       
        Map<Integer, Action> actions = _perso.getActions();
        
        /* Pour chaque Action */
        for (Map.Entry<Integer, Action> entry : actions.entrySet()) {
            Action a = entry.getValue();
            JLabel action = new JLabel();
            
            /* Déplacement */
            if (a.getMethodName().equals("deplacer")) {
                action.setBounds(this.DEBUT_X + this.TAILLE * (int) a.getParam()[0],
                        this.DEBUT_Y + this.TAILLE * (int) a.getParam()[1],
                        this.TAILLE, this.TAILLE);
            
            /* Pousser un Mur ou Glisser sur une flaque d'Hemoglobine */
            } else if (a.getMethodName().equals("pousserMur") ||
                    a.getMethodName().equals("glisser")) {
                int dir = (int) a.getParam()[1];
                int x = _perso.getX();
                int y = _perso.getY();
                if (dir == Finstere.HAUT) y--;
                if (dir == Finstere.BAS) y++;
                if (dir == Finstere.GAUCHE) x--;
                if (dir == Finstere.DROITE) x++;
                action.setBounds(this.DEBUT_X + this.TAILLE * x,
                        this.DEBUT_Y + this.TAILLE * y,
                        this.TAILLE, this.TAILLE);
                
            /* Sortir du Labyrinthe */
            } else if (a.getMethodName().equals("sortir")) {
                this.sortirButton.setEnabled(true);
                this.sortirButton.setName("" + entry.getKey());
                this.sortirButton.addMouseListener(this.choiceListener);
                
            /* Terminer les Actions */
            } else if (a.getMethodName().equals("finAction")) {
                this.terminerButton.setEnabled(true);
                this.terminerButton.setName("" + entry.getKey());
                this.terminerButton.addMouseListener(this.choiceListener);
            }
            
            /* Affichage sur le Labyrinthe pour choisir l'Action */
            if (a.getMethodName().equals("deplacer") ||
                    a.getMethodName().equals("pousserMur") ||
                    a.getMethodName().equals("glisser")) {
                action.setName("" + entry.getKey());
                action.setIcon(a.getImageIcon());
                action.setVerticalAlignment(SwingConstants.CENTER);
                action.setHorizontalAlignment(SwingConstants.CENTER);
                action.setCursor(new Cursor(Cursor.HAND_CURSOR));
                action.addMouseListener(this.choiceListener);
                this.choixAction.add(action);
                this.layeredPanel.add(action, this.ACTION);
            }            
        }
    }
    
    /* Supprime les JLabel du choix de l'Action */
    public void cleanChoixAction() {
        for (JLabel label : this.choixAction) {
            this.layeredPanel.remove(label);
        }
        
        this.choixAction.clear();
        
        this.layeredPanel.repaint();
        
        this.sortirButton.setEnabled(false);
        this.terminerButton.setEnabled(false);
    }
    
    /* Affiche la pierre de premier Joueur à coté de J1 */
    public void premierJ1() {
        this.premierJ1.setIcon(new ImageIcon(getClass().getResource("/img/premier_joueur.png")));
        this.premierJ1.setVerticalAlignment(SwingConstants.CENTER);
        this.premierJ1.setHorizontalAlignment(SwingConstants.CENTER);
        this.premierJ2.setIcon(null);
    }
    
    /* Affiche la pierre de premier Joueur à coté de J2 */
    public void premierJ2() {
        this.premierJ2.setIcon(new ImageIcon(getClass().getResource("/img/premier_joueur.png")));
        this.premierJ2.setVerticalAlignment(SwingConstants.CENTER);
        this.premierJ2.setHorizontalAlignment(SwingConstants.CENTER);
        this.premierJ1.setIcon(null);
    }
    
    /* Met le nom de J1 en rouge */
    public void tourJ1() {
        this.nomJ1.setForeground(Color.red);
        this.nomJ2.setForeground(new Color(254,248,120));
    }
    
    /* Met le nom de J2 en rouge */
    public void tourJ2() {
        this.nomJ2.setForeground(Color.red);
        this.nomJ1.setForeground(new Color(254,248,120));
    }
    
    /* Met à jour la liste des Cartes dans la Pioche et la Défausse */
    public void updatePiocheDefausse(Paquet _paquet) {
        
        /* Pioche */
        List<String> p = _paquet.getPioche();
        String pioche = "Pioche : " + p.size() + " cartes (";
        for (int i = 0 ; i < p.size() ; i++) {
            pioche += p.get(i);
            if (i == p.size() - 1) {
                pioche += ")";
            } else {
                pioche += " ";
            }
        }
        this.listePioche.setText(pioche);
        
        /* Défausse */
        List<String> d = _paquet.getDefausse();
        String defausse = "Défausse : " + d.size() + " cartes (";
        for (int i = 0 ; i < d.size() ; i++) {
            defausse += d.get(i);
            if (i == d.size() - 1) {
                defausse += ")";
            } else {
                defausse += " ";
            }
        }
        this.listeDefausse.setText(defausse);
    }
    
    /* Affiche les morts et les déplacement du Monstre */
    public void deplacementMonstre(Carte _carte, String _dep, List<Personnage> _morts) {
        this.cleanDeplacementMonstre();
        
        String deplacement = "<html>Carte tirée : ";
        if (_carte.getValeur() == Finstere.X) {
            deplacement += "X";
        } else if (_carte.getValeur() == Finstere.XX) {
            deplacement += "XX";
        } else {
            deplacement += _carte.getValeur();
        }
        deplacement += "<br/>" + _dep.replaceAll("\n", "<br/>") + "</html>";
        
        if (this.deplacementLabel.getText().isEmpty()) {
            this.deplacementLabel.setText(deplacement);
        } else {
            this.deplacementLabel.setText(deplacement.substring(0, deplacement.length() - 7) 
                    + "<br/><br/>" + this.deplacementLabel.getText().substring(6));
        }
        
        for (Personnage m : _morts) {
            JLabel mort = new JLabel();
            mort.setBounds((this.TAILLE + 6) * _morts.indexOf(m), 0,
                    this.TAILLE, this.TAILLE);
            mort.setVerticalAlignment(SwingConstants.CENTER);
            mort.setHorizontalAlignment(SwingConstants.CENTER);
            mort.setIcon(m.getImageIcon());
            this.persosMorts.add(mort, this.EN_DESSOUS);
            this.morts.add(mort);
        }
        
        this.persosMorts.repaint();
    }
    
    /* Supprime les JLabel de la liste des Morts */
    private void cleanDeplacementMonstre() {
        for (JLabel mort : this.morts) {
            this.persosMorts.remove(mort);
        }
        this.morts.clear();
        this.persosMorts.repaint();
    }
    
    /* Affichage de la fenêtre de victoire en fin de Partie */
    public void victoire(String _msg, Joueur _gagnant) {
        this.cleanVictoireListe();        
        
        if (_gagnant != null) {
            this.victoireLabel.setText("<html><div style='text-align: center;'>"
                    + "Victoireee !!!!<br/>" + _msg + "</div></html>");
            List<ImageIcon> persos = _gagnant.getSortis();
                
            for(ImageIcon p : persos) {
                JLabel perso = new JLabel();
                perso.setBounds((this.TAILLE + 6) * persos.indexOf(p), 0,
                        this.TAILLE, this.TAILLE);
                perso.setVerticalAlignment(SwingConstants.CENTER);
                perso.setHorizontalAlignment(SwingConstants.CENTER);
                perso.setIcon(p);
                this.sortis.add(perso);
                this.victoireListe.add(perso, this.EN_DESSOUS);
            }
        } else {
            this.victoireLabel.setText("<html><div style='text-align: center;'>"
                    + "Égalité...<br/>" + _msg + "</div></html>");
        }
        
        this.victoire.requestFocusInWindow();
        this.victoire.pack();
        this.victoire.setVisible(true);
    }
    
    /* Supprime les JLabel de victoireListe */
    private void cleanVictoireListe() {
        for (JLabel label : this.sortis) {
            this.victoireListe.remove(label);
        }
        
        this.sortis.clear();
    }
    
    /* Réaffiche l'interface si l'utilisateur veux refaire une Partie (si il 
     * jouait dans le terminal)
     */
    public void nouvellePartie() {
        this.requestFocusInWindow();
        this.pack();
        this.setVisible(true);
        this.newGame.requestFocusInWindow();
        this.newGame.pack();
        this.newGame.setVisible(true);
    }
    
    /* Getters */
    public int getChoix() {
        return this.choix;
    }

    public Partie getPartie() {
        return this.partie;
    }    
    
    /* Setters */
    public void setChoix(int _choix) {
        this.choix = _choix;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Finstere().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bienvenue;
    private javax.swing.JButton commencerPartie;
    private javax.swing.JFrame creationJoueurs;
    private javax.swing.JPanel creationJoueursPanel;
    private javax.swing.JLabel deplacementLabel;
    private javax.swing.JLabel derniersCoups;
    private javax.swing.JLabel finstereLogo;
    private javax.swing.JComboBox<String> j1Color;
    private javax.swing.JLabel j1Label;
    private javax.swing.JTextField j1Name;
    private javax.swing.JComboBox<String> j2Color;
    private javax.swing.JLabel j2Label;
    private javax.swing.JTextField j2Name;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane layeredPanel;
    private javax.swing.JLabel listeDefausse;
    private javax.swing.JLabel listePioche;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel monstreLabel;
    private javax.swing.JLabel mortsLabel;
    private javax.swing.JLabel nbManche;
    private javax.swing.JLabel nbTour;
    private javax.swing.JFrame newGame;
    private javax.swing.JButton newGameInterface;
    private javax.swing.JLabel newGameLogo;
    private javax.swing.JLabel newGameLogo1;
    private javax.swing.JMenuItem newGameMenu;
    private javax.swing.JPanel newGamePanel;
    private javax.swing.JButton newGameTerm;
    private javax.swing.JLabel nomJ1;
    private javax.swing.JLabel nomJ2;
    private javax.swing.JMenu partieMenu;
    private javax.swing.JLayeredPane persosJ1;
    private javax.swing.JLayeredPane persosJ2;
    private javax.swing.JLayeredPane persosMorts;
    private javax.swing.JLabel premierJ1;
    private javax.swing.JLabel premierJ2;
    private javax.swing.JMenuItem quitMenu;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton sortirButton;
    private javax.swing.JButton terminerButton;
    private javax.swing.JFrame victoire;
    private javax.swing.JLabel victoireLabel;
    private javax.swing.JLayeredPane victoireListe;
    private javax.swing.JButton victoireNewGame;
    private javax.swing.JPanel victoirePanel;
    // End of variables declaration//GEN-END:variables
}
